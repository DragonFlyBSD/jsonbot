#!/usr/bin/env python
#
#

""" run multiple bot instances in 1 program. """

# bootstrap

import sys
import os
from jsb.utils.log import setloglevel
from jsb.lib.fleet import getfleet
import jsb
from jsb.utils.exception import handle_exception
from jsb.lib.threads import start_new_thread
from jsb.lib.users import users_boot
from jsb.utils.mainloop import mainloop
from jsb.lib.exit import globalshutdown
from jsb.lib.boot import boot
from jsb.lib.datadir import makedirs
from jsb.lib.partyline import partyline
from jsb.version import getversion
from jsb.lib.datadir import setdatadir, getdatadir
from jsb.utils.opts import makefleetopts
import signal
import time
import logging
import warnings

warnings.simplefilter("ignore")


sys.path.insert(0, os.getcwd())

# basic imports


# options parser


opts = makefleetopts()


if opts.datadir:
    setdatadir(opts.datadir)


print(getversion("FLEET"))

# jsb imports


fleet = getfleet(opts.datadir)
if opts.all or opts.show:
    avail = fleet.avail()
    if avail:
        sys.stdout.write("available bots: " + ", ".join(avail) + ".")
    else:
        sys.stdout.write("no bots available.")

if opts.all:
    print("")
    os._exit(0)

# provide sigterm support


def dostop(a, b):
    """sig handler"""
    globalshutdown()


signal.signal(signal.SIGTERM, dostop)

if not fleet.avail():
    logging.error("fleet - no bots found.")
    os._exit(1)

# loglevel


setloglevel(opts.loglevel or "warn", not opts.nocolors)

# start the fleet

boot(opts.datadir)

if opts.owner:
    users = users_boot()
    users.make_owner(opts.owner)


def doresume():
    try:
        fleet.resume(opts.doresume)
        fleet.startok.wait()
        partyline.resume(opts.doresume)
        time.sleep(1)
        os.unlink(opts.doresume)
    except:
        handle_exception()


if opts.doresume:
    start_new_thread(doresume, ())
else:
    start_new_thread(fleet.boot, (opts.args, ["tornado", "console"]))

mainloop()
